#!/bin/bash

#######################################
# FUNCTIONS
#######################################

artisan () {
    docker compose exec php php artisan "${@:1}"
}

composer () {
    docker compose run --rm php composer "${@:1}"
}

build () {
    docker compose build "${@:1}"
}

start () {
     if ! docker compose up -d --remove-orphans; then
            echo "Failed to start the containers."
            exit 1
    fi
}

stop () {
    docker compose stop
}

down () {
    docker compose down "${@:1}"
}

destroy () {
    read -p "This will delete containers, volumes and images. Are you sure? [y/N]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi
    docker compose down -v --rmi all --remove-orphans
}

restart () {
    stop && start
}

update () {
    stop \
    && git pull \
    && composer ionstall \
    && node \
    && start \
    && artisan migrate
}

node () {
     docker compose run --rm php npm install \
     && docker compose run --rm php npm run build
}

logs () {
    docker compose logs -f "${@:1}"
}

env () {
    if [ ! -f .env ]; then
        cp .env.example .env
    fi
    if [ ! -f docker-compose.overwrite.yml ]; then
        cp docker-compose.overwrite.example.yml docker-compose.overwrite.yml
    fi
}

init () {
    env \
    && destroy \
    && composer install \
    && node

    if [ ! -f .docker/nginx/certs/core.local.crt ]; then
        cert_generate
    fi

    start \
    && cert_install \
    && artisan migrate \
    && artisan system:install
}


# Generate a new certificate
cert_generate () {
    rm -Rf .docker/nginx/certs/core.local.*
    docker compose run --rm nginx sh -c "cd /etc/nginx/certs && touch openssl.cnf && cat /etc/ssl/openssl.cnf > openssl.cnf && echo \"\" >> openssl.cnf && echo \"[ SAN ]\" >> openssl.cnf && echo \"subjectAltName=DNS.1:core.local,DNS.2:*.core.local\" >> openssl.cnf && openssl req -x509 -sha256 -nodes -newkey rsa:4096 -keyout core.local.key -out core.local.crt -days 3650 -subj \"/CN=*.core.local\" -config openssl.cnf -extensions SAN && rm openssl.cnf"
}

# Install the certificate
cert_install () {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain .docker/nginx/certs/core.local.crt
    elif [[ "$OSTYPE" == "linux-gnu" ]]; then
        sudo ln -s "$(pwd)/.docker/nginx/certs/core.local.crt" /usr/local/share/ca-certificates/core.local.crt
        sudo update-ca-certificates
    else
        echo "Could not install the certificate on the host machine, please do it manually"
    fi

    docker compose exec -u root php update-ca-certificates
}


#######################################
# MENU
#######################################

case "$1" in
    artisan)
        artisan "${@:2}"
        ;;
    composer)
        composer "${@:2}"
        ;;
    build)
        build "${@:2}"
        ;;
    start)
        start
        ;;
    restart)
        restart
        ;;
    destroy)
        destroy
        ;;
    stop)
        stop
        ;;
    down)
        down "${@:2}"
        ;;
    update)
        update
        ;;
    node)
        node
        ;;
    logs)
        logs "${@:2}"
        ;;
    env)
        env
        ;;
    init)
        init
        ;;
    cert)
        case "$2" in
            generate)
                cert_generate
                ;;
            install)
                cert_install
                ;;
            *)
                cat << EOF
Certificate management commands.

Usage:
    core cert <command>

Available commands:
    generate .................................. Generate a new certificate
    install ................................... Install the certificate

EOF
                ;;
        esac
        ;;
    *)
        cat << EOF
Command line interface for the Docker-based web development environment core.

Usage:
    core <command> [options] [arguments]

Available commands:
    artisan ................................... Run an Artisan command
    composer .................................. Run a Composer command

    logs [container] .......................... Display and tail the logs of all containers or the specified one's
    restart ................................... Restart the containers
    start ..................................... Start the containers
    stop ...................................... Stop the containers
    down [-v] ................................. Stop and destroy all containers
                                                Options:
                                                    -v .................... Destroy the volumes as well
    destroy ................................... Remove the entire Docker environment

    env ....................................... Create env file from example
    init ...................................... Initialise the Docker environment and the application
    update .................................... Update the Docker environment
    node ...................................... Run a Node Install and build front

    cert ...................................... Generate or Install ssl certificate
EOF
        exit 1
        ;;
esac